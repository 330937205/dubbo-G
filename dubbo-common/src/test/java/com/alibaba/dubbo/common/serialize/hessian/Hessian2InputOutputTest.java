package com.alibaba.dubbo.common.serialize.hessian;

import com.alibaba.dubbo.common.io.UnsafeByteArrayInputStream;
import com.alibaba.dubbo.common.io.UnsafeByteArrayOutputStream;
import com.alibaba.dubbo.common.serialize.DataInput;
import com.alibaba.dubbo.common.serialize.DataOutput;

import com.alibaba.dubbo.common.serialize.support.hessian.Hessian2ObjectInput;
import com.alibaba.dubbo.common.serialize.support.hessian.Hessian2ObjectOutput;
import junit.framework.TestCase;

import java.io.IOException;

/**
 * Created by haoning1 on 2017/5/17.
 */
public class Hessian2InputOutputTest extends TestCase {
    private static final String SMALL_STRING = Hessian2InputOutputTest.class.getName(), BIG_STREAM = "";
    private static final byte[] SMALL_BYTES = SMALL_STRING.getBytes(), BIG_BYTES = BIG_STREAM.getBytes();

    public void testMain() throws Exception {
        // write.
        for (int i = 0; i < 100; i++) {
            long start = System.nanoTime();
            UnsafeByteArrayOutputStream os = new UnsafeByteArrayOutputStream();
            DataOutput cos = new Hessian2ObjectOutput(os);
            long start1 = System.nanoTime();
            writeTest(cos);
            System.out.println("time enode total : " + (System.nanoTime() - start1));
            System.out.println("time enode total : " + (System.nanoTime() - start));
            // read.
            byte[] b = os.toByteArray();
            DataInput cis = new Hessian2ObjectInput(new UnsafeByteArrayInputStream(b));
            long start2 = System.nanoTime();
            readTest(cis);
            System.out.println("time decode total : " + (System.nanoTime() - start2));
            System.out.println("time total : " + (System.nanoTime() - start));
        }
    }

    private void writeTest(DataOutput out) throws IOException {
        out.writeShort((short) 'a');
        out.writeShort((short) -1);
        out.writeShort((short) 1234);
        out.writeInt(0x22);
        out.writeInt(-0x22);
        out.writeInt(0x2222);
        out.writeInt(-0x2222);
        out.writeInt(0x222222);
        out.writeInt(-0x222222);
        out.writeInt(0x22222222);
        out.writeInt(-0x22222222);
        out.writeLong(0x22);
        out.writeLong(-0x22);
        out.writeLong(0x2222);
        out.writeLong(-0x2222);
        out.writeLong(0x222222);
        out.writeLong(-0x222222);
        out.writeLong(0x22222222);
        out.writeLong(-0x22222222);
        out.writeLong(0x2222222222l);
        out.writeLong(-0x2222222222l);
        out.writeLong(0x222222222222l);
        out.writeLong(-0x222222222222l);
        out.writeLong(0x22222222222222l);
        out.writeLong(-0x22222222222222l);
        out.writeLong(0x2222222222222222l);
        out.writeLong(-0x2222222222222222l);
        out.writeDouble(1212.454);
        out.writeBytes(SMALL_BYTES);
        out.writeUTF(SMALL_STRING);
        out.writeBytes(BIG_BYTES);
        out.flushBuffer();
    }

    private void readTest(DataInput in) throws IOException {
        assertEquals(in.readShort(), 'a');
        assertEquals(in.readShort(), -1);
        assertEquals(in.readShort(), 1234);
        assertEquals(in.readInt(), 0x22);
        assertEquals(in.readInt(), -0x22);
        assertEquals(in.readInt(), 0x2222);
        assertEquals(in.readInt(), -0x2222);
        assertEquals(in.readInt(), 0x222222);
        assertEquals(in.readInt(), -0x222222);
        assertEquals(in.readInt(), 0x22222222);
        assertEquals(in.readInt(), -0x22222222);
        assertEquals(in.readLong(), 0x22);
        assertEquals(in.readLong(), -0x22);
        assertEquals(in.readLong(), 0x2222);
        assertEquals(in.readLong(), -0x2222);
        assertEquals(in.readLong(), 0x222222);
        assertEquals(in.readLong(), -0x222222);
        assertEquals(in.readLong(), 0x22222222);
        assertEquals(in.readLong(), -0x22222222);
        assertEquals(in.readLong(), 0x2222222222l);
        assertEquals(in.readLong(), -0x2222222222l);
        assertEquals(in.readLong(), 0x222222222222l);
        assertEquals(in.readLong(), -0x222222222222l);
        assertEquals(in.readLong(), 0x22222222222222l);
        assertEquals(in.readLong(), -0x22222222222222l);
        assertEquals(in.readLong(), 0x2222222222222222l);
        assertEquals(in.readLong(), -0x2222222222222222l);
        assertEquals(in.readDouble(), 1212.454);
        assertSameArray(in.readBytes(), SMALL_BYTES);
        assertEquals(in.readUTF(), SMALL_STRING);
        assertSameArray(in.readBytes(), BIG_BYTES);
    }

    private static void assertSameArray(byte[] b1, byte[] b2) {
        assertEquals(b1.length, b2.length);
        for (int i = 0; i < b1.length; i++)
            assertEquals(b1[i], b2[i]);
    }
}
